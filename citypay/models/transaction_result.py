# coding: utf-8

"""
    CityPay POS API

    CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API is available from https://github.com/citypay/citypay-pos-api  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: dev@citypay.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from citypay.models.transaction_data import TransactionData  # noqa: F401,E501


class TransactionResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'identifier': 'str',
        'is_complete': 'bool',
        'data': 'TransactionData'
    }

    attribute_map = {
        'status': 'status',
        'identifier': 'identifier',
        'is_complete': 'is_complete',
        'data': 'data'
    }

    def __init__(self, status=None, identifier=None, is_complete=None, data=None):  # noqa: E501
        """TransactionResult - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._identifier = None
        self._is_complete = None
        self._data = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if identifier is not None:
            self.identifier = identifier
        if is_complete is not None:
            self.is_complete = is_complete
        if data is not None:
            self.data = data

    @property
    def status(self):
        """Gets the status of this TransactionResult.  # noqa: E501

        A description of the status of a transaction  # noqa: E501

        :return: The status of this TransactionResult.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransactionResult.

        A description of the status of a transaction  # noqa: E501

        :param status: The status of this TransactionResult.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def identifier(self):
        """Gets the identifier of this TransactionResult.  # noqa: E501

        The indentifier uniquely identifying the transaction  # noqa: E501

        :return: The identifier of this TransactionResult.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this TransactionResult.

        The indentifier uniquely identifying the transaction  # noqa: E501

        :param identifier: The identifier of this TransactionResult.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def is_complete(self):
        """Gets the is_complete of this TransactionResult.  # noqa: E501

        A boolean value stating whether the transaction has completed. The value will be false if the transaction is in progress. Should the value be true, a property containing the transaction details is made available.  # noqa: E501

        :return: The is_complete of this TransactionResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_complete

    @is_complete.setter
    def is_complete(self, is_complete):
        """Sets the is_complete of this TransactionResult.

        A boolean value stating whether the transaction has completed. The value will be false if the transaction is in progress. Should the value be true, a property containing the transaction details is made available.  # noqa: E501

        :param is_complete: The is_complete of this TransactionResult.  # noqa: E501
        :type: bool
        """

        self._is_complete = is_complete

    @property
    def data(self):
        """Gets the data of this TransactionResult.  # noqa: E501


        :return: The data of this TransactionResult.  # noqa: E501
        :rtype: TransactionData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TransactionResult.


        :param data: The data of this TransactionResult.  # noqa: E501
        :type: TransactionData
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
