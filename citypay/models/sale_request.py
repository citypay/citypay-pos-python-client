# coding: utf-8

"""
    CityPay POS API

    CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API is available from https://github.com/citypay/citypay-pos-api  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: dev@citypay.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SaleRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device': 'str',
        'amount': 'int',
        'identifier': 'str'
    }

    attribute_map = {
        'device': 'device',
        'amount': 'amount',
        'identifier': 'identifier'
    }

    def __init__(self, device=None, amount=None, identifier=None):  # noqa: E501
        """SaleRequest - a model defined in Swagger"""  # noqa: E501

        self._device = None
        self._amount = None
        self._identifier = None
        self.discriminator = None

        self.device = device
        self.amount = amount
        self.identifier = identifier

    @property
    def device(self):
        """Gets the device of this SaleRequest.  # noqa: E501

        The name of the target device used by the API. The device will be setup prior to the sale but allows targeting of multiple devices.  # noqa: E501

        :return: The device of this SaleRequest.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this SaleRequest.

        The name of the target device used by the API. The device will be setup prior to the sale but allows targeting of multiple devices.  # noqa: E501

        :param device: The device of this SaleRequest.  # noqa: E501
        :type: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    @property
    def amount(self):
        """Gets the amount of this SaleRequest.  # noqa: E501

        The amount to process in the lowest denomination and in the base currency of the device. 4798 for instance would process the transaction for £47.98  # noqa: E501

        :return: The amount of this SaleRequest.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SaleRequest.

        The amount to process in the lowest denomination and in the base currency of the device. 4798 for instance would process the transaction for £47.98  # noqa: E501

        :param amount: The amount of this SaleRequest.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def identifier(self):
        """Gets the identifier of this SaleRequest.  # noqa: E501

        An identifier or reference for the sale as taken by the point of sale system. This should be used to cross reference transactions after it has processed. The value should be unique and will be used to check on the processing of the transaction.  # noqa: E501

        :return: The identifier of this SaleRequest.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this SaleRequest.

        An identifier or reference for the sale as taken by the point of sale system. This should be used to cross reference transactions after it has processed. The value should be unique and will be used to check on the processing of the transaction.  # noqa: E501

        :param identifier: The identifier of this SaleRequest.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaleRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
