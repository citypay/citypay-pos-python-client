# coding: utf-8

"""
    CityPay POS API

    CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: dev@citypay.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TransactionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_data': 'str',
        'auxiliary_data': 'str',
        'card_type': 'str',
        'completed_at': 'str',
        'created_at': 'str',
        'currency_symbol': 'str',
        'declined_by_card': 'bool',
        'emv_app_cryptogram': 'str',
        'emv_app_expiration_date': 'str',
        'emv_app_txn_counter': 'int',
        'emv_authorized_amount': 'str',
        'emv_cardholder_verification_results': 'str',
        'emv_country_code': 'str',
        'emv_cryptogram_info_data': 'str',
        'emv_icc_appid': 'str',
        'emv_interchange_profile': 'str',
        'emv_issuer_app_data': 'str',
        'emv_pan_seq_num': 'str',
        'emv_terminal_capabilities': 'str',
        'emv_terminal_type': 'str',
        'emv_terminal_verification_results': 'str',
        'emv_track2_equivalent': 'str',
        'emv_txn_currency_code': 'str',
        'emv_txn_date': 'str',
        'emv_txn_status_info': 'str',
        'emv_txn_type': 'str',
        'emv_txn_unpredictable_number': 'str',
        'is_commercial_card': 'str',
        'is_contactless': 'str',
        'is_fallback': 'str',
        'is_offline': 'str',
        'is_voided': 'str',
        'response_code': 'str',
        'response_text': 'str',
        'result': 'str',
        'scheme': 'str',
        'signature_required': 'str',
        'terminal_id': 'str',
        'total_amount': 'int',
        'transaction_type': 'str',
        'verified_by_pin': 'bool'
    }

    attribute_map = {
        'additional_data': 'additional_data',
        'auxiliary_data': 'auxiliary_data',
        'card_type': 'card_type',
        'completed_at': 'completed_at',
        'created_at': 'created_at',
        'currency_symbol': 'currency_symbol',
        'declined_by_card': 'declined_by_card',
        'emv_app_cryptogram': 'emv_app_cryptogram',
        'emv_app_expiration_date': 'emv_app_expiration_date',
        'emv_app_txn_counter': 'emv_app_txn_counter',
        'emv_authorized_amount': 'emv_authorized_amount',
        'emv_cardholder_verification_results': 'emv_cardholder_verification_results',
        'emv_country_code': 'emv_country_code',
        'emv_cryptogram_info_data': 'emv_cryptogram_info_data',
        'emv_icc_appid': 'emv_icc_appid',
        'emv_interchange_profile': 'emv_interchange_profile',
        'emv_issuer_app_data': 'emv_issuer_app_data',
        'emv_pan_seq_num': 'emv_pan_seq_num',
        'emv_terminal_capabilities': 'emv_terminal_capabilities',
        'emv_terminal_type': 'emv_terminal_type',
        'emv_terminal_verification_results': 'emv_terminal_verification_results',
        'emv_track2_equivalent': 'emv_track2_equivalent',
        'emv_txn_currency_code': 'emv_txn_currency_code',
        'emv_txn_date': 'emv_txn_date',
        'emv_txn_status_info': 'emv_txn_status_info',
        'emv_txn_type': 'emv_txn_type',
        'emv_txn_unpredictable_number': 'emv_txn_unpredictable_number',
        'is_commercial_card': 'is_commercial_card',
        'is_contactless': 'is_contactless',
        'is_fallback': 'is_fallback',
        'is_offline': 'is_offline',
        'is_voided': 'is_voided',
        'response_code': 'response_code',
        'response_text': 'response_text',
        'result': 'result',
        'scheme': 'scheme',
        'signature_required': 'signature_required',
        'terminal_id': 'terminal_id',
        'total_amount': 'total_amount',
        'transaction_type': 'transaction_type',
        'verified_by_pin': 'verified_by_pin'
    }

    def __init__(self, additional_data=None, auxiliary_data=None, card_type=None, completed_at=None, created_at=None, currency_symbol=None, declined_by_card=None, emv_app_cryptogram=None, emv_app_expiration_date=None, emv_app_txn_counter=None, emv_authorized_amount=None, emv_cardholder_verification_results=None, emv_country_code=None, emv_cryptogram_info_data=None, emv_icc_appid=None, emv_interchange_profile=None, emv_issuer_app_data=None, emv_pan_seq_num=None, emv_terminal_capabilities=None, emv_terminal_type=None, emv_terminal_verification_results=None, emv_track2_equivalent=None, emv_txn_currency_code=None, emv_txn_date=None, emv_txn_status_info=None, emv_txn_type=None, emv_txn_unpredictable_number=None, is_commercial_card=None, is_contactless=None, is_fallback=None, is_offline=None, is_voided=None, response_code=None, response_text=None, result=None, scheme=None, signature_required=None, terminal_id=None, total_amount=None, transaction_type=None, verified_by_pin=None):  # noqa: E501
        """TransactionData - a model defined in Swagger"""  # noqa: E501

        self._additional_data = None
        self._auxiliary_data = None
        self._card_type = None
        self._completed_at = None
        self._created_at = None
        self._currency_symbol = None
        self._declined_by_card = None
        self._emv_app_cryptogram = None
        self._emv_app_expiration_date = None
        self._emv_app_txn_counter = None
        self._emv_authorized_amount = None
        self._emv_cardholder_verification_results = None
        self._emv_country_code = None
        self._emv_cryptogram_info_data = None
        self._emv_icc_appid = None
        self._emv_interchange_profile = None
        self._emv_issuer_app_data = None
        self._emv_pan_seq_num = None
        self._emv_terminal_capabilities = None
        self._emv_terminal_type = None
        self._emv_terminal_verification_results = None
        self._emv_track2_equivalent = None
        self._emv_txn_currency_code = None
        self._emv_txn_date = None
        self._emv_txn_status_info = None
        self._emv_txn_type = None
        self._emv_txn_unpredictable_number = None
        self._is_commercial_card = None
        self._is_contactless = None
        self._is_fallback = None
        self._is_offline = None
        self._is_voided = None
        self._response_code = None
        self._response_text = None
        self._result = None
        self._scheme = None
        self._signature_required = None
        self._terminal_id = None
        self._total_amount = None
        self._transaction_type = None
        self._verified_by_pin = None
        self.discriminator = None

        if additional_data is not None:
            self.additional_data = additional_data
        if auxiliary_data is not None:
            self.auxiliary_data = auxiliary_data
        if card_type is not None:
            self.card_type = card_type
        if completed_at is not None:
            self.completed_at = completed_at
        if created_at is not None:
            self.created_at = created_at
        if currency_symbol is not None:
            self.currency_symbol = currency_symbol
        if declined_by_card is not None:
            self.declined_by_card = declined_by_card
        if emv_app_cryptogram is not None:
            self.emv_app_cryptogram = emv_app_cryptogram
        if emv_app_expiration_date is not None:
            self.emv_app_expiration_date = emv_app_expiration_date
        if emv_app_txn_counter is not None:
            self.emv_app_txn_counter = emv_app_txn_counter
        if emv_authorized_amount is not None:
            self.emv_authorized_amount = emv_authorized_amount
        if emv_cardholder_verification_results is not None:
            self.emv_cardholder_verification_results = emv_cardholder_verification_results
        if emv_country_code is not None:
            self.emv_country_code = emv_country_code
        if emv_cryptogram_info_data is not None:
            self.emv_cryptogram_info_data = emv_cryptogram_info_data
        if emv_icc_appid is not None:
            self.emv_icc_appid = emv_icc_appid
        if emv_interchange_profile is not None:
            self.emv_interchange_profile = emv_interchange_profile
        if emv_issuer_app_data is not None:
            self.emv_issuer_app_data = emv_issuer_app_data
        if emv_pan_seq_num is not None:
            self.emv_pan_seq_num = emv_pan_seq_num
        if emv_terminal_capabilities is not None:
            self.emv_terminal_capabilities = emv_terminal_capabilities
        if emv_terminal_type is not None:
            self.emv_terminal_type = emv_terminal_type
        if emv_terminal_verification_results is not None:
            self.emv_terminal_verification_results = emv_terminal_verification_results
        if emv_track2_equivalent is not None:
            self.emv_track2_equivalent = emv_track2_equivalent
        if emv_txn_currency_code is not None:
            self.emv_txn_currency_code = emv_txn_currency_code
        if emv_txn_date is not None:
            self.emv_txn_date = emv_txn_date
        if emv_txn_status_info is not None:
            self.emv_txn_status_info = emv_txn_status_info
        if emv_txn_type is not None:
            self.emv_txn_type = emv_txn_type
        if emv_txn_unpredictable_number is not None:
            self.emv_txn_unpredictable_number = emv_txn_unpredictable_number
        if is_commercial_card is not None:
            self.is_commercial_card = is_commercial_card
        if is_contactless is not None:
            self.is_contactless = is_contactless
        if is_fallback is not None:
            self.is_fallback = is_fallback
        if is_offline is not None:
            self.is_offline = is_offline
        if is_voided is not None:
            self.is_voided = is_voided
        if response_code is not None:
            self.response_code = response_code
        if response_text is not None:
            self.response_text = response_text
        if result is not None:
            self.result = result
        if scheme is not None:
            self.scheme = scheme
        if signature_required is not None:
            self.signature_required = signature_required
        if terminal_id is not None:
            self.terminal_id = terminal_id
        if total_amount is not None:
            self.total_amount = total_amount
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if verified_by_pin is not None:
            self.verified_by_pin = verified_by_pin

    @property
    def additional_data(self):
        """Gets the additional_data of this TransactionData.  # noqa: E501

        additional data provided within the acquirer response  # noqa: E501

        :return: The additional_data of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this TransactionData.

        additional data provided within the acquirer response  # noqa: E501

        :param additional_data: The additional_data of this TransactionData.  # noqa: E501
        :type: str
        """

        self._additional_data = additional_data

    @property
    def auxiliary_data(self):
        """Gets the auxiliary_data of this TransactionData.  # noqa: E501

        Value provided by online processing  # noqa: E501

        :return: The auxiliary_data of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._auxiliary_data

    @auxiliary_data.setter
    def auxiliary_data(self, auxiliary_data):
        """Sets the auxiliary_data of this TransactionData.

        Value provided by online processing  # noqa: E501

        :param auxiliary_data: The auxiliary_data of this TransactionData.  # noqa: E501
        :type: str
        """

        self._auxiliary_data = auxiliary_data

    @property
    def card_type(self):
        """Gets the card_type of this TransactionData.  # noqa: E501

        The type of card used such as EMV  # noqa: E501

        :return: The card_type of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this TransactionData.

        The type of card used such as EMV  # noqa: E501

        :param card_type: The card_type of this TransactionData.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def completed_at(self):
        """Gets the completed_at of this TransactionData.  # noqa: E501

        The date and time that the transaction was completed in ISO-8166 format  # noqa: E501

        :return: The completed_at of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this TransactionData.

        The date and time that the transaction was completed in ISO-8166 format  # noqa: E501

        :param completed_at: The completed_at of this TransactionData.  # noqa: E501
        :type: str
        """

        self._completed_at = completed_at

    @property
    def created_at(self):
        """Gets the created_at of this TransactionData.  # noqa: E501

        The date and time that the transaction was created in ISO-8166 format  # noqa: E501

        :return: The created_at of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TransactionData.

        The date and time that the transaction was created in ISO-8166 format  # noqa: E501

        :param created_at: The created_at of this TransactionData.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def currency_symbol(self):
        """Gets the currency_symbol of this TransactionData.  # noqa: E501

        The currency symbol used  # noqa: E501

        :return: The currency_symbol of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._currency_symbol

    @currency_symbol.setter
    def currency_symbol(self, currency_symbol):
        """Sets the currency_symbol of this TransactionData.

        The currency symbol used  # noqa: E501

        :param currency_symbol: The currency_symbol of this TransactionData.  # noqa: E501
        :type: str
        """

        self._currency_symbol = currency_symbol

    @property
    def declined_by_card(self):
        """Gets the declined_by_card of this TransactionData.  # noqa: E501

        Boolean value should the transaction be declined by the card  # noqa: E501

        :return: The declined_by_card of this TransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._declined_by_card

    @declined_by_card.setter
    def declined_by_card(self, declined_by_card):
        """Sets the declined_by_card of this TransactionData.

        Boolean value should the transaction be declined by the card  # noqa: E501

        :param declined_by_card: The declined_by_card of this TransactionData.  # noqa: E501
        :type: bool
        """

        self._declined_by_card = declined_by_card

    @property
    def emv_app_cryptogram(self):
        """Gets the emv_app_cryptogram of this TransactionData.  # noqa: E501

        Cryptogram used by the card in processing  # noqa: E501

        :return: The emv_app_cryptogram of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_app_cryptogram

    @emv_app_cryptogram.setter
    def emv_app_cryptogram(self, emv_app_cryptogram):
        """Sets the emv_app_cryptogram of this TransactionData.

        Cryptogram used by the card in processing  # noqa: E501

        :param emv_app_cryptogram: The emv_app_cryptogram of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_app_cryptogram = emv_app_cryptogram

    @property
    def emv_app_expiration_date(self):
        """Gets the emv_app_expiration_date of this TransactionData.  # noqa: E501

        Expiry date of the card  # noqa: E501

        :return: The emv_app_expiration_date of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_app_expiration_date

    @emv_app_expiration_date.setter
    def emv_app_expiration_date(self, emv_app_expiration_date):
        """Sets the emv_app_expiration_date of this TransactionData.

        Expiry date of the card  # noqa: E501

        :param emv_app_expiration_date: The emv_app_expiration_date of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_app_expiration_date = emv_app_expiration_date

    @property
    def emv_app_txn_counter(self):
        """Gets the emv_app_txn_counter of this TransactionData.  # noqa: E501

        A transaction counter, incremented by the device resulting in a transaction number  # noqa: E501

        :return: The emv_app_txn_counter of this TransactionData.  # noqa: E501
        :rtype: int
        """
        return self._emv_app_txn_counter

    @emv_app_txn_counter.setter
    def emv_app_txn_counter(self, emv_app_txn_counter):
        """Sets the emv_app_txn_counter of this TransactionData.

        A transaction counter, incremented by the device resulting in a transaction number  # noqa: E501

        :param emv_app_txn_counter: The emv_app_txn_counter of this TransactionData.  # noqa: E501
        :type: int
        """

        self._emv_app_txn_counter = emv_app_txn_counter

    @property
    def emv_authorized_amount(self):
        """Gets the emv_authorized_amount of this TransactionData.  # noqa: E501

        The amount authorised  # noqa: E501

        :return: The emv_authorized_amount of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_authorized_amount

    @emv_authorized_amount.setter
    def emv_authorized_amount(self, emv_authorized_amount):
        """Sets the emv_authorized_amount of this TransactionData.

        The amount authorised  # noqa: E501

        :param emv_authorized_amount: The emv_authorized_amount of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_authorized_amount = emv_authorized_amount

    @property
    def emv_cardholder_verification_results(self):
        """Gets the emv_cardholder_verification_results of this TransactionData.  # noqa: E501

        Verification results within the processing scope  # noqa: E501

        :return: The emv_cardholder_verification_results of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_cardholder_verification_results

    @emv_cardholder_verification_results.setter
    def emv_cardholder_verification_results(self, emv_cardholder_verification_results):
        """Sets the emv_cardholder_verification_results of this TransactionData.

        Verification results within the processing scope  # noqa: E501

        :param emv_cardholder_verification_results: The emv_cardholder_verification_results of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_cardholder_verification_results = emv_cardholder_verification_results

    @property
    def emv_country_code(self):
        """Gets the emv_country_code of this TransactionData.  # noqa: E501

        A country code returned by the device  # noqa: E501

        :return: The emv_country_code of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_country_code

    @emv_country_code.setter
    def emv_country_code(self, emv_country_code):
        """Sets the emv_country_code of this TransactionData.

        A country code returned by the device  # noqa: E501

        :param emv_country_code: The emv_country_code of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_country_code = emv_country_code

    @property
    def emv_cryptogram_info_data(self):
        """Gets the emv_cryptogram_info_data of this TransactionData.  # noqa: E501

        Cryptogram info returned by the card  # noqa: E501

        :return: The emv_cryptogram_info_data of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_cryptogram_info_data

    @emv_cryptogram_info_data.setter
    def emv_cryptogram_info_data(self, emv_cryptogram_info_data):
        """Sets the emv_cryptogram_info_data of this TransactionData.

        Cryptogram info returned by the card  # noqa: E501

        :param emv_cryptogram_info_data: The emv_cryptogram_info_data of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_cryptogram_info_data = emv_cryptogram_info_data

    @property
    def emv_icc_appid(self):
        """Gets the emv_icc_appid of this TransactionData.  # noqa: E501

        The application id (AID) identifying the card used  # noqa: E501

        :return: The emv_icc_appid of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_icc_appid

    @emv_icc_appid.setter
    def emv_icc_appid(self, emv_icc_appid):
        """Sets the emv_icc_appid of this TransactionData.

        The application id (AID) identifying the card used  # noqa: E501

        :param emv_icc_appid: The emv_icc_appid of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_icc_appid = emv_icc_appid

    @property
    def emv_interchange_profile(self):
        """Gets the emv_interchange_profile of this TransactionData.  # noqa: E501

        The interchange profile used  # noqa: E501

        :return: The emv_interchange_profile of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_interchange_profile

    @emv_interchange_profile.setter
    def emv_interchange_profile(self, emv_interchange_profile):
        """Sets the emv_interchange_profile of this TransactionData.

        The interchange profile used  # noqa: E501

        :param emv_interchange_profile: The emv_interchange_profile of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_interchange_profile = emv_interchange_profile

    @property
    def emv_issuer_app_data(self):
        """Gets the emv_issuer_app_data of this TransactionData.  # noqa: E501

        Application data provided by the issuer  # noqa: E501

        :return: The emv_issuer_app_data of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_issuer_app_data

    @emv_issuer_app_data.setter
    def emv_issuer_app_data(self, emv_issuer_app_data):
        """Sets the emv_issuer_app_data of this TransactionData.

        Application data provided by the issuer  # noqa: E501

        :param emv_issuer_app_data: The emv_issuer_app_data of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_issuer_app_data = emv_issuer_app_data

    @property
    def emv_pan_seq_num(self):
        """Gets the emv_pan_seq_num of this TransactionData.  # noqa: E501

        Sequence number provided by the card  # noqa: E501

        :return: The emv_pan_seq_num of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_pan_seq_num

    @emv_pan_seq_num.setter
    def emv_pan_seq_num(self, emv_pan_seq_num):
        """Sets the emv_pan_seq_num of this TransactionData.

        Sequence number provided by the card  # noqa: E501

        :param emv_pan_seq_num: The emv_pan_seq_num of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_pan_seq_num = emv_pan_seq_num

    @property
    def emv_terminal_capabilities(self):
        """Gets the emv_terminal_capabilities of this TransactionData.  # noqa: E501

        Terminal capabilities of the device  # noqa: E501

        :return: The emv_terminal_capabilities of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_terminal_capabilities

    @emv_terminal_capabilities.setter
    def emv_terminal_capabilities(self, emv_terminal_capabilities):
        """Sets the emv_terminal_capabilities of this TransactionData.

        Terminal capabilities of the device  # noqa: E501

        :param emv_terminal_capabilities: The emv_terminal_capabilities of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_terminal_capabilities = emv_terminal_capabilities

    @property
    def emv_terminal_type(self):
        """Gets the emv_terminal_type of this TransactionData.  # noqa: E501

        The terminal type of the device  # noqa: E501

        :return: The emv_terminal_type of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_terminal_type

    @emv_terminal_type.setter
    def emv_terminal_type(self, emv_terminal_type):
        """Sets the emv_terminal_type of this TransactionData.

        The terminal type of the device  # noqa: E501

        :param emv_terminal_type: The emv_terminal_type of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_terminal_type = emv_terminal_type

    @property
    def emv_terminal_verification_results(self):
        """Gets the emv_terminal_verification_results of this TransactionData.  # noqa: E501

        TVR provided by the verification process of the transaction  # noqa: E501

        :return: The emv_terminal_verification_results of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_terminal_verification_results

    @emv_terminal_verification_results.setter
    def emv_terminal_verification_results(self, emv_terminal_verification_results):
        """Sets the emv_terminal_verification_results of this TransactionData.

        TVR provided by the verification process of the transaction  # noqa: E501

        :param emv_terminal_verification_results: The emv_terminal_verification_results of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_terminal_verification_results = emv_terminal_verification_results

    @property
    def emv_track2_equivalent(self):
        """Gets the emv_track2_equivalent of this TransactionData.  # noqa: E501

        A masked version of the card number  # noqa: E501

        :return: The emv_track2_equivalent of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_track2_equivalent

    @emv_track2_equivalent.setter
    def emv_track2_equivalent(self, emv_track2_equivalent):
        """Sets the emv_track2_equivalent of this TransactionData.

        A masked version of the card number  # noqa: E501

        :param emv_track2_equivalent: The emv_track2_equivalent of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_track2_equivalent = emv_track2_equivalent

    @property
    def emv_txn_currency_code(self):
        """Gets the emv_txn_currency_code of this TransactionData.  # noqa: E501

        ISO currency code of the transaction  # noqa: E501

        :return: The emv_txn_currency_code of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_txn_currency_code

    @emv_txn_currency_code.setter
    def emv_txn_currency_code(self, emv_txn_currency_code):
        """Sets the emv_txn_currency_code of this TransactionData.

        ISO currency code of the transaction  # noqa: E501

        :param emv_txn_currency_code: The emv_txn_currency_code of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_txn_currency_code = emv_txn_currency_code

    @property
    def emv_txn_date(self):
        """Gets the emv_txn_date of this TransactionData.  # noqa: E501

        ISO date of the transaction  # noqa: E501

        :return: The emv_txn_date of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_txn_date

    @emv_txn_date.setter
    def emv_txn_date(self, emv_txn_date):
        """Sets the emv_txn_date of this TransactionData.

        ISO date of the transaction  # noqa: E501

        :param emv_txn_date: The emv_txn_date of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_txn_date = emv_txn_date

    @property
    def emv_txn_status_info(self):
        """Gets the emv_txn_status_info of this TransactionData.  # noqa: E501

        Status info of the transaction  # noqa: E501

        :return: The emv_txn_status_info of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_txn_status_info

    @emv_txn_status_info.setter
    def emv_txn_status_info(self, emv_txn_status_info):
        """Sets the emv_txn_status_info of this TransactionData.

        Status info of the transaction  # noqa: E501

        :param emv_txn_status_info: The emv_txn_status_info of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_txn_status_info = emv_txn_status_info

    @property
    def emv_txn_type(self):
        """Gets the emv_txn_type of this TransactionData.  # noqa: E501

        Transacrtion type information returned  # noqa: E501

        :return: The emv_txn_type of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_txn_type

    @emv_txn_type.setter
    def emv_txn_type(self, emv_txn_type):
        """Sets the emv_txn_type of this TransactionData.

        Transacrtion type information returned  # noqa: E501

        :param emv_txn_type: The emv_txn_type of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_txn_type = emv_txn_type

    @property
    def emv_txn_unpredictable_number(self):
        """Gets the emv_txn_unpredictable_number of this TransactionData.  # noqa: E501

        The UN or unpredicatble number in the transaction process  # noqa: E501

        :return: The emv_txn_unpredictable_number of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._emv_txn_unpredictable_number

    @emv_txn_unpredictable_number.setter
    def emv_txn_unpredictable_number(self, emv_txn_unpredictable_number):
        """Sets the emv_txn_unpredictable_number of this TransactionData.

        The UN or unpredicatble number in the transaction process  # noqa: E501

        :param emv_txn_unpredictable_number: The emv_txn_unpredictable_number of this TransactionData.  # noqa: E501
        :type: str
        """

        self._emv_txn_unpredictable_number = emv_txn_unpredictable_number

    @property
    def is_commercial_card(self):
        """Gets the is_commercial_card of this TransactionData.  # noqa: E501

        Determines if the card was a commercial card  # noqa: E501

        :return: The is_commercial_card of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._is_commercial_card

    @is_commercial_card.setter
    def is_commercial_card(self, is_commercial_card):
        """Sets the is_commercial_card of this TransactionData.

        Determines if the card was a commercial card  # noqa: E501

        :param is_commercial_card: The is_commercial_card of this TransactionData.  # noqa: E501
        :type: str
        """

        self._is_commercial_card = is_commercial_card

    @property
    def is_contactless(self):
        """Gets the is_contactless of this TransactionData.  # noqa: E501

        Determines if the card was contactless  # noqa: E501

        :return: The is_contactless of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._is_contactless

    @is_contactless.setter
    def is_contactless(self, is_contactless):
        """Sets the is_contactless of this TransactionData.

        Determines if the card was contactless  # noqa: E501

        :param is_contactless: The is_contactless of this TransactionData.  # noqa: E501
        :type: str
        """

        self._is_contactless = is_contactless

    @property
    def is_fallback(self):
        """Gets the is_fallback of this TransactionData.  # noqa: E501

        Determines if fallback was used  # noqa: E501

        :return: The is_fallback of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._is_fallback

    @is_fallback.setter
    def is_fallback(self, is_fallback):
        """Sets the is_fallback of this TransactionData.

        Determines if fallback was used  # noqa: E501

        :param is_fallback: The is_fallback of this TransactionData.  # noqa: E501
        :type: str
        """

        self._is_fallback = is_fallback

    @property
    def is_offline(self):
        """Gets the is_offline of this TransactionData.  # noqa: E501

        Determines if the transaction was authorised offline  # noqa: E501

        :return: The is_offline of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._is_offline

    @is_offline.setter
    def is_offline(self, is_offline):
        """Sets the is_offline of this TransactionData.

        Determines if the transaction was authorised offline  # noqa: E501

        :param is_offline: The is_offline of this TransactionData.  # noqa: E501
        :type: str
        """

        self._is_offline = is_offline

    @property
    def is_voided(self):
        """Gets the is_voided of this TransactionData.  # noqa: E501

        Determines if the transaction was voided  # noqa: E501

        :return: The is_voided of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._is_voided

    @is_voided.setter
    def is_voided(self, is_voided):
        """Sets the is_voided of this TransactionData.

        Determines if the transaction was voided  # noqa: E501

        :param is_voided: The is_voided of this TransactionData.  # noqa: E501
        :type: str
        """

        self._is_voided = is_voided

    @property
    def response_code(self):
        """Gets the response_code of this TransactionData.  # noqa: E501

        A response code provided by the acquirer  # noqa: E501

        :return: The response_code of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this TransactionData.

        A response code provided by the acquirer  # noqa: E501

        :param response_code: The response_code of this TransactionData.  # noqa: E501
        :type: str
        """

        self._response_code = response_code

    @property
    def response_text(self):
        """Gets the response_text of this TransactionData.  # noqa: E501

        The response text returned by the acquirer  # noqa: E501

        :return: The response_text of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._response_text

    @response_text.setter
    def response_text(self, response_text):
        """Sets the response_text of this TransactionData.

        The response text returned by the acquirer  # noqa: E501

        :param response_text: The response_text of this TransactionData.  # noqa: E501
        :type: str
        """

        self._response_text = response_text

    @property
    def result(self):
        """Gets the result of this TransactionData.  # noqa: E501

        A text result of the transaction  # noqa: E501

        :return: The result of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this TransactionData.

        A text result of the transaction  # noqa: E501

        :param result: The result of this TransactionData.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def scheme(self):
        """Gets the scheme of this TransactionData.  # noqa: E501

        A description of the card scheme for the card  # noqa: E501

        :return: The scheme of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this TransactionData.

        A description of the card scheme for the card  # noqa: E501

        :param scheme: The scheme of this TransactionData.  # noqa: E501
        :type: str
        """

        self._scheme = scheme

    @property
    def signature_required(self):
        """Gets the signature_required of this TransactionData.  # noqa: E501

        Determines whether a signature was required for legacy systems  # noqa: E501

        :return: The signature_required of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._signature_required

    @signature_required.setter
    def signature_required(self, signature_required):
        """Sets the signature_required of this TransactionData.

        Determines whether a signature was required for legacy systems  # noqa: E501

        :param signature_required: The signature_required of this TransactionData.  # noqa: E501
        :type: str
        """

        self._signature_required = signature_required

    @property
    def terminal_id(self):
        """Gets the terminal_id of this TransactionData.  # noqa: E501

        The terminal id used from the device  # noqa: E501

        :return: The terminal_id of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this TransactionData.

        The terminal id used from the device  # noqa: E501

        :param terminal_id: The terminal_id of this TransactionData.  # noqa: E501
        :type: str
        """

        self._terminal_id = terminal_id

    @property
    def total_amount(self):
        """Gets the total_amount of this TransactionData.  # noqa: E501

        The total amount processed  # noqa: E501

        :return: The total_amount of this TransactionData.  # noqa: E501
        :rtype: int
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this TransactionData.

        The total amount processed  # noqa: E501

        :param total_amount: The total_amount of this TransactionData.  # noqa: E501
        :type: int
        """

        self._total_amount = total_amount

    @property
    def transaction_type(self):
        """Gets the transaction_type of this TransactionData.  # noqa: E501

        The type of transaction processed  # noqa: E501

        :return: The transaction_type of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this TransactionData.

        The type of transaction processed  # noqa: E501

        :param transaction_type: The transaction_type of this TransactionData.  # noqa: E501
        :type: str
        """

        self._transaction_type = transaction_type

    @property
    def verified_by_pin(self):
        """Gets the verified_by_pin of this TransactionData.  # noqa: E501

        Determines if the transaction was verified by pin entry  # noqa: E501

        :return: The verified_by_pin of this TransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._verified_by_pin

    @verified_by_pin.setter
    def verified_by_pin(self, verified_by_pin):
        """Sets the verified_by_pin of this TransactionData.

        Determines if the transaction was verified by pin entry  # noqa: E501

        :param verified_by_pin: The verified_by_pin of this TransactionData.  # noqa: E501
        :type: bool
        """

        self._verified_by_pin = verified_by_pin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
